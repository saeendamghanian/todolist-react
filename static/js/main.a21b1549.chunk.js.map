{"version":3,"sources":["Item.js","ToDoList.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Item","props","task","id","title","type","onChange","toggleComplete","ToDoList","todos","map","key","Search","className","App","state","taskStatus","console","log","todo","completed","setState","axios","get","then","res","data","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRAeeA,EAbF,SAAAC,GAAU,IAAD,EACEA,EAAMC,KAApBC,EADY,EACZA,GADY,EACRC,MACZ,OACE,6BACE,2BAAOC,KAAK,WAAWC,SAAU,kBAAML,EAAMM,eAAeJ,MAC5D,8BACGF,EAAMC,KAAKC,GADd,MACqBF,EAAMC,KAAKE,OAEhC,4CCKSI,EAXE,SAAAP,GACf,OAAOA,EAAMQ,MAAMC,KAAI,SAAAR,GAAI,OACzB,kBAAC,EAAD,CAAMS,IAAKT,EAAKC,GAAID,KAAMA,EAAMK,eAAgBN,EAAMM,qBCK3CK,EATA,WACb,OACE,yBAAKC,UAAU,UACb,2BAAOR,KAAK,SACZ,4C,yBCsCSS,E,2MArCbC,MAAQ,CACNN,MAAO,GACPO,WAAY,I,EASdT,eAAiB,SAAAJ,GACfc,QAAQC,IAAI,qBACZ,IAAIC,EAAO,EAAKJ,MAAMN,MAAMC,KAAI,SAAAS,GAC1BA,EAAKhB,KAAOA,IACdgB,EAAKC,WAAaD,EAAKC,cAG3B,EAAKC,SAAS,CACZZ,MAAOU,K,mFAdU,IAAD,OAClBG,IACGC,IAAI,wDACJC,MAAK,SAAAC,GAAG,OAAI,EAAKJ,SAAS,CAAEZ,MAAOgB,EAAIC,Y,+BAgB1C,OACE,yBAAKb,UAAU,OACb,4CACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEJ,MAAOkB,KAAKZ,MAAMN,MAClBF,eAAgBoB,KAAKpB,sB,GA/BbqB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.a21b1549.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Item = props => {\n  const { id, title } = props.task;\n  return (\n    <div>\n      <input type=\"checkbox\" onChange={() => props.toggleComplete(id)} />\n      <span>\n        {props.task.id} - {props.task.title}\n      </span>\n      <button>delete</button>\n    </div>\n  );\n};\n\nexport default Item;\n","import React from \"react\";\nimport Item from \"./Item\";\nimport PropTypes from \"prop-types\";\n\nconst ToDoList = props => {\n  return props.todos.map(task => (\n    <Item key={task.id} task={task} toggleComplete={props.toggleComplete} />\n  ));\n};\n\nToDoList.propTypes = {\n  todos: PropTypes.array.isRequired,\n  toggleComplete: PropTypes.func.isRequired\n};\n\nexport default ToDoList;\n","import React from \"react\";\n\nconst Search = () => {\n  return (\n    <div className=\"search\">\n      <input type=\"text\" />\n      <button>Search</button>\n    </div>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport ToDoList from \"./ToDoList\";\nimport Search from \"./Search\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    taskStatus: \"\"\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\n      .then(res => this.setState({ todos: res.data }));\n  }\n\n  toggleComplete = id => {\n    console.log(\"Hi, I am here ...\");\n    let todo = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n    });\n    this.setState({\n      todos: todo\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>My Todo List</h1>\n        <Search />\n        <ToDoList\n          todos={this.state.todos}\n          toggleComplete={this.toggleComplete}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}